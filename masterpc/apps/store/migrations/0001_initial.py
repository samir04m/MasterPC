# Generated by Django 3.0.6 on 2020-05-30 06:06

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pc', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Store name')),
                ('website', models.URLField(max_length=500, verbose_name='website url')),
                ('logo_url', models.URLField(max_length=500, verbose_name='Logo url')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Store_storage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Storage')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'Storage in Store',
                'verbose_name_plural': 'Storages in Store',
                'ordering': ['storage'],
            },
        ),
        migrations.CreateModel(
            name='Store_ram',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('ram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Ram')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'RAM in Store',
                'verbose_name_plural': 'RAMs in Store',
                'ordering': ['ram'],
            },
        ),
        migrations.CreateModel(
            name='Store_psu',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('psu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Psu')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'PSU in Store',
                'verbose_name_plural': 'PSUs in Store',
                'ordering': ['psu'],
            },
        ),
        migrations.CreateModel(
            name='Store_gpu',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('gpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Gpu')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'GPU in Store',
                'verbose_name_plural': 'GPUs in Store',
                'ordering': ['gpu'],
            },
        ),
        migrations.CreateModel(
            name='Store_cpu',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('cpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Cpu')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'CPU in Store',
                'verbose_name_plural': 'CPUs in Store',
                'ordering': ['cpu'],
            },
        ),
        migrations.CreateModel(
            name='Store_case',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Case')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'Case in Store',
                'verbose_name_plural': 'Cases in Store',
                'ordering': ['case'],
            },
        ),
        migrations.CreateModel(
            name='Store_board',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=500, verbose_name='Url')),
                ('price', models.IntegerField(verbose_name='Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is Available')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pc.Board')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
            options={
                'verbose_name': 'Board in Store',
                'verbose_name_plural': 'Boards in Store',
                'ordering': ['board'],
            },
        ),
        migrations.AddField(
            model_name='store',
            name='board',
            field=models.ManyToManyField(through='store.Store_board', to='pc.Board'),
        ),
        migrations.AddField(
            model_name='store',
            name='case',
            field=models.ManyToManyField(through='store.Store_case', to='pc.Case'),
        ),
        migrations.AddField(
            model_name='store',
            name='cpu',
            field=models.ManyToManyField(through='store.Store_cpu', to='pc.Cpu'),
        ),
        migrations.AddField(
            model_name='store',
            name='gpu',
            field=models.ManyToManyField(through='store.Store_gpu', to='pc.Gpu'),
        ),
        migrations.AddField(
            model_name='store',
            name='psu',
            field=models.ManyToManyField(through='store.Store_psu', to='pc.Psu'),
        ),
        migrations.AddField(
            model_name='store',
            name='ram',
            field=models.ManyToManyField(through='store.Store_ram', to='pc.Ram'),
        ),
        migrations.AddField(
            model_name='store',
            name='storage',
            field=models.ManyToManyField(through='store.Store_storage', to='pc.Storage'),
        ),
    ]
